AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates the AD users and groups required for FileNet P8
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - ADServer1NetBIOSName
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - DomainAdminUser
          - DomainAdminPassword
    ParameterLabels:
      ADServer1NetBIOSName:
        default: Domain Controller 1 NetBIOS Name
      DomainAdminPassword:
        default: Domain Admin Password
      DomainAdminUser:
        default: Domain Admin User Name
      DomainDNSName:
        default: Domain DNS Name
      DomainNetBIOSName:
        default: Domain NetBIOS Name
Parameters:
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: The S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-ibm-filenet-content-manager/
    Description: The S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  ADServer1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: DC1
    Description: NetBIOS name of the first Active Directory server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  DomainAdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the domain admin user. Must be at least 8 characters
      containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DomainAdminUser:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: Admin
    Description: User name for the account that will be added as Domain Administrator.
      This is separate from the default "Administrator" account
    MaxLength: '25'
    MinLength: '5'
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN) of the forest root domain e.g.
      example.com
    MaxLength: '255'
    MinLength: '2'
    Type: String
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: example
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  DCInstanceId:
    Description: Instance ID of the Domain Controller - DC1
    Type: 'AWS::EC2::Instance::Id'
Resources:
  QuickStartLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}-AD_Populate'
      RetentionInDays: 30
  PopulateDSConfigDocument:
    Type: 'AWS::SSM::Document'
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Populate AD with Users and Groups
        parameters:
          QSS3BucketName:
            default: !Ref QSS3BucketName
            description: The AWS S3 Bucket Name
            type: String
          QSS3KeyPrefix:
            default: !Ref QSS3KeyPrefix
            description: The AWS S3 Key Prefix
            type: String
          DomainAdminPassword:
              description: Password for the domain admin user
              type: String
              default: !Ref DomainAdminPassword
          DomainAdminUser:
              default: !Ref DomainAdminUser
              description: User name for the account that will be added as Domain Administrator
              type: String
          DomainDNSName:
              default: !Ref DomainDNSName
              description: Fully qualified domain name of the forest root domain
              type: String
          DomainNetBIOSName:
              default: !Ref DomainNetBIOSName
              description: NetBIOS name of the domain
              type: String
        mainSteps:
          - action: 'aws:runPowerShellScript'
            name: downloadScriptFile
            inputs:
              runCommand:
                - Import-Module BitsTransfer
                - >-
                  Start-BitsTransfer -Source
                  'https://ibm-fncm-assets.s3.amazonaws.com/scripts/FNCM_populateLdap.ps1'
                  -Destination "C:\AWSQuickstart\FNCM_populateLdap.ps1"
          - action: 'aws:runPowerShellScript'
            name: addUsersGroups
            inputs:
              runCommand:
                - !Join
                  - ' '
                  - - '& "C:\AWSQuickstart\FNCM_populateLdap.ps1"'
                    - '{{DomainDNSName}}'
                    - '{{DomainAdminUser}}'
                    - '{{DomainNetBIOSName}}'
                    - '{{DomainAdminPassword}}'
              workingDirectory: 'C:\AWSQuickstart'
  SSMSendCommandPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'ssm:SendCommand'
            Effect: Allow
            Resource: '*'
  SSMSendCommandLambdaRole:
    DependsOn:
      - SSMSendCommandPolicy
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Ref SSMSendCommandPolicy
  ExecuteADPopulateDocumentLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - PopulateDSConfigDocument
      - SSMSendCommandLambdaRole
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Code:
        ZipFile: !Join
          - |+

          - - import boto3
            - 'import os, time,json'
            - import cfnresponse
            - import logging
            - ''
            - 'def lambda_handler(event, context):'
            - '    print(''Received event: %s'' % json.dumps(event))'
            - '    status = cfnresponse.SUCCESS'
            - '    try:'
            - '        if event[''RequestType''] == ''Delete'':'
            - '            cfnresponse.send(event, context, status, {})'
            - '        else:'
            - '            ssm = boto3.client(''ssm'')'
            - ''
            - '            instanceId = event[''ResourceProperties''][''InstanceId'']'
            - '            ssmDocument = event[''ResourceProperties''][''SSMDocument'']'
            - '            responseData = {}'
            - ''
            - '            response=ssm.send_command('
            - '                InstanceIds = [instanceId],'
            - '                DocumentName=ssmDocument,'
            - '                TimeoutSeconds=3600,'
            - '                Comment=''Populate Active Directory Users and Groups'','
            - '                CloudWatchOutputConfig={''CloudWatchOutputEnabled'': True, ''CloudWatchLogGroupName'': ''QuickStartLogs''},'
            - '                MaxConcurrency=''50'','
            - '                MaxErrors=''5'','
            - '            )'
            - ''
            - '            cmdId = response[''Command''][''CommandId'']'
            - '            responseData[''CommandId''] = cmdId'
            - '            print(''Started AD population in CommandId: '' + cmdId)'
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)'
            - '    except Exception as e:'
            - '        logging.error(''Exception: %s'' % e, exc_info=True)'
            - '        status = cfnresponse.FAILED'
            - '        cfnresponse.send(event, context, status, {}, None)'
      Description: Executes AD Populate SSM document on AD DC1 server instance
      MemorySize: 320
      Timeout: 180
      Role: !GetAtt
        - SSMSendCommandLambdaRole
        - Arn
  ExecuteADPopulateDocument:
    Type: 'Custom::ExecuteSnowflakeDocument'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt
        - ExecuteADPopulateDocumentLambda
        - Arn
      SSMDocument: !Ref PopulateDSConfigDocument
      InstanceId: !Ref DCInstanceId
      QuickStartLogs: !Ref QuickStartLogs
